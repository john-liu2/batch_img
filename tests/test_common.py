"""Test common.py
pytest -sv tests/test_common.py
Copyright © 2025 John Liu
"""

import json
from os.path import dirname
from pathlib import Path
from unittest.mock import MagicMock, patch

import pytest
import requests

from batch_img.common import Common
from batch_img.const import PKG_NAME, REPLACE
from .helper import DotDict


@pytest.fixture(params=[(PKG_NAME, "0.1.2"), ("", "0.1.2")])
def ver_data(request):
    return request.param


def test_get_version(ver_data):
    pkg_name, expected = ver_data
    actual = Common.get_version(pkg_name)
    assert actual == expected


@pytest.fixture(
    params=[
        (PKG_NAME, f"✅ {PKG_NAME} is up to date (0.1.2)"),
        (
            "bad_bogus",
            f"⚠️ Error get data from PyPI: https://pypi.org/pypi/bad_bogus/json",
        ),
    ]
)
def data_check_latest_version(request):
    return request.param


def test_check_latest_version(data_check_latest_version):
    pkg_name, expected = data_check_latest_version
    actual = Common.check_latest_version(pkg_name)
    assert actual == expected


@patch("requests.get")
def test_error1_check_latest_version(mock_req_get):
    mock_req_get.side_effect = requests.RequestException
    actual = Common.check_latest_version(PKG_NAME)
    assert actual == "requests.get() Exception: "


@patch("requests.get")
def test_error2_check_latest_version(mock_req_get):
    mock_response = MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = {"key": "value"}
    mock_req_get.return_value = mock_response
    actual = Common.check_latest_version(PKG_NAME)
    assert actual == "Error parse PyPI response: 'info'"


@pytest.fixture(
    params=[
        ({}, "cmd1 -op1 | grep k1", (0, "", "")),
        (
            DotDict({"returncode": 0, "stdout": "\n My Std Output\n", "stderr": ""}),
            "cmd2 -op2 | grep k2",
            (0, "\n My Std Output\n", ""),
        ),
        (
            DotDict({"returncode": 2, "stdout": "\n My Output\n", "stderr": "SomeErr"}),
            "cmd3 -op3 | grep k3",
            (2, "\n My Output\n", "SomeErr"),
        ),
        (
            DotDict({"returncode": 0, "stdout": "\n \t \n", "stderr": ""}),
            "cmd3 -op3 | grep k3",
            (0, "\n \t \n", ""),
        ),
    ]
)
def run_cmd_data(request):
    return request.param


@patch("subprocess.run")
def test_run_cmd(mock_s_run, run_cmd_data):
    v_1, cmd, expected = run_cmd_data
    if v_1:
        mock_s_run.return_value = v_1
        actual = Common.run_cmd(cmd)
        assert actual == expected
    else:
        mock_s_run.side_effect = KeyError("KE")
        with pytest.raises(KeyError):
            Common.run_cmd(cmd)


@pytest.fixture(
    params=[
        (1023, "1023 B"),
        (1025, "1.0 KB"),
        (101988, "99.6 KB"),
        (201554, "196.8 KB"),
    ]
)
def data_readable_file_size(request):
    return request.param


def test_readable_file_size(data_readable_file_size):
    in_bytes, expected = data_readable_file_size
    actual = Common.readable_file_size(in_bytes)
    assert actual == expected


def test_json_dump():
    _dict = {
        "Make": b"Apple",
        "Model": b"iPhone 16 Pro Max",
        "Orientation": 1,
        "XResolution": (72, 1),
        "YResolution": (72, 1),
        "ResolutionUnit": 2,
        "Software": b"18.4.1",
        "HostComputer": b"iPhone 16 Pro Max",
        "TileWidth": 512,
        "TileLength": 512,
        "ExifTag": 255,
        "ExposureTime": (1, 21),
        "ExposureProgram": 2,
        "ISOSpeedRatings": 640,
        "ExifVersion": b"0232",
        "OffsetTime": b"-07:00",
        "OffsetTimeOriginal": b"-07:00",
        "OffsetTimeDigitized": b"-07:00",
        "ShutterSpeedValue": (40344, 9211),
        "ApertureValue": (40006, 17585),
        "BrightnessValue": (-48260, 31259),
        "ExposureBiasValue": (-7, 128),
        "MeteringMode": 5,
        "Flash": 16,
        "SubSecTimeOriginal": b"408",
        "SubSecTimeDigitized": b"408",
        "ColorSpace": 65535,
        "PixelXDimension": 4032,
        "PixelYDimension": 3024,
        "SensingMethod": 2,
        "ExposureMode": 0,
        "WhiteBalance": 0,
        "FocalLengthIn35mmFilm": 24,
        "LensMake": b"Apple",
        "LensModel": b"iPhone 16 Pro Max back triple camera 2.22mm f/2.2",
    }
    decoded = {k: (v.decode() if isinstance(v, bytes) else v) for k, v in _dict.items()}
    json.dumps(decoded, indent=2)


@pytest.fixture(
    params=[
        (
            b'Exif\x00\x00MM\x00*\x00\x00\x00\x08\x00\r\x01\x0f\x00\x02\x00\x00\x00\x06\x00\x00\x00\xaa\x01\x10\x00\x02\x00\x00\x00\x12\x00\x00\x00\xb0\x01\x12\x00\x03\x00\x00\x00\x01\x00\x01\x00\x00\x01\x1a\x00\x05\x00\x00\x00\x01\x00\x00\x00\xc2\x01\x1b\x00\x05\x00\x00\x00\x01\x00\x00\x00\xca\x01(\x00\x03\x00\x00\x00\x01\x00\x02\x00\x00\x011\x00\x02\x00\x00\x00\x07\x00\x00\x00\xd2\x012\x00\x02\x00\x00\x00\x14\x00\x00\x00\xd9\x01<\x00\x02\x00\x00\x00\x12\x00\x00\x00\xed\x01B\x00\x03\x00\x00\x00\x01\x02\x00\x00\x00\x01C\x00\x03\x00\x00\x00\x01\x02\x00\x00\x00\x87i\x00\x04\x00\x00\x00\x01\x00\x00\x00\xff\x88%\x00\x04\x00\x00\x00\x01\x00\x00\x08\xe6\x00\x00\x00\x00Apple\x00iPhone 16 Pro Max\x00\x00\x00\x00H\x00\x00\x00\x01\x00\x00\x00H\x00\x00\x00\x0118.4.1\x002025:05:29 12:00:48\x00iPhone 16 Pro Max\x00\x00 \x82\x9a\x00\x05\x00\x00\x00\x01\x00\x00\x02\x81\x82\x9d\x00\x05\x00\x00\x00\x01\x00\x00\x02\x89\x88"\x00\x03\x00\x00\x00\x01\x00\x02\x00\x00\x88\'\x00\x03\x00\x00\x00\x01\x02\x80\x00\x00\x90\x00\x00\x07\x00\x00\x00\x040232\x90\x03\x00\x02\x00\x00\x00\x14\x00\x00\x02\x91\x90\x04\x00\x02\x00\x00\x00\x14\x00\x00\x02\xa5\x90\x10\x00\x02\x00\x00\x00\x07\x00\x00\x02\xb9\x90\x11\x00\x02\x00\x00\x00\x07\x00\x00\x02\xc0\x90\x12\x00\x02\x00\x00\x00\x07\x00\x00\x02\xc7\x92\x01\x00\n\x00\x00\x00\x01\x00\x00\x02\xce\x92\x02\x00\x05\x00\x00\x00\x01\x00\x00\x02\xd6\x92\x03\x00\n\x00\x00\x00\x01\x00\x00\x02\xde\x92\x04\x00\n\x00\x00\x00\x01\x00\x00\x02\xe6\x92\x07\x00\x03\x00\x00\x00\x01\x00\x05\x00\x00\x92\t\x00\x03\x00\x00\x00\x01\x00\x10\x00\x00\x92\n\x00\x05\x00\x00\x00\x01\x00\x00\x02\xee\x92\x14\x00\x03\x00\x00\x00\x04\x00\x00\x02\xf6\x92|\x00\x07\x00\x00\x05\x90\x00\x00\x02\xfe\x92\x91\x00\x02\x00\x00\x00\x04408\x00\x92\x92\x00\x02\x00\x00\x00\x04408\x00\xa0\x01\x00\x03\x00\x00\x00\x01\xff\xff\x00\x00\xa0\x02\x00\x04\x00\x00\x00\x01\x00\x00\x0f\xc0\xa0\x03\x00\x04\x00\x00\x00\x01\x00\x00\x0b\xd0\xa2\x17\x00\x03\x00\x00\x00\x01\x00\x02\x00\x00\xa3\x01\x00\x07\x00\x00\x00\x01\x01\x00\x00\x00\xa4\x02\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\xa4\x03\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\xa4\x05\x00\x03\x00\x00\x00\x01\x00\x18\x00\x00\xa42\x00\x05\x00\x00\x00\x04\x00\x00\x08\x8e\xa43\x00\x02\x00\x00\x00\x06\x00\x00\x08\xae\xa44\x00\x02\x00\x00\x002\x00\x00\x08\xb4\x00\x00\x00\x01\x00\x00\x00\x15\x00\x00\x00\x0b\x00\x00\x00\x052025:05:29 12:00:48\x002025:05:29 12:00:48\x00-07:00\x00-07:00\x00-07:00\x00\x00\x00\x9d\x98\x00\x00#\xfb\x00\x00\x9cF\x00\x00D\xb1\xff\xffC|\x00\x00z\x1b\xff\xff\xff\xf9\x00\x00\x00\x80\x00\x17\xad\xb8\x00\n\xaa\x81\x08^\x05\xe4\x05,\x02\xf6Apple iOS\x00\x00\x01MM\x006\x00\x01\x00\t\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x03\x00\x07\x00\x00\x00h\x00\x00\x02\x9c\x00\x04\x00\t\x00\x00\x00\x01\x00\x00\x00\x01\x00\x05\x00\t\x00\x00\x00\x01\x00\x00\x00N\x00\x06\x00\t\x00\x00\x00\x01\x00\x00\x00S\x00\x07\x00\t\x00\x00\x00\x01\x00\x00\x00\x01\x00\x08\x00\n\x00\x00\x00\x03\x00\x00\x03\x04\x00\x0e\x00\t\x00\x00\x00\x01\x00\x00\x00\x04\x00\x14\x00\t\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x17\x00\x10\x00\x00\x00\x01\x00\x00\x03\x1c\x00\x19\x00\t\x00\x00\x00\x01\x00 \x00\x00\x00\x1a\x00\x02\x00\x00\x00\x06\x00\x00\x03$\x00\x1f\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00 \x00\x02\x00\x00\x00%\x00\x00\x03*\x00!\x00\n\x00\x00\x00\x01\x00\x00\x03O\x00#\x00\t\x00\x00\x00\x02\x00\x00\x03W\x00%\x00\x10\x00\x00\x00\x01\x00\x00\x03_\x00&\x00\t\x00\x00\x00\x01\x00\x00\x00\x02\x00\'\x00\n\x00\x00\x00\x01\x00\x00\x03g\x00+\x00\x02\x00\x00\x00%\x00\x00\x03o\x00-\x00\t\x00\x00\x00\x01\x00\x00\x1e\xcd\x00.\x00\t\x00\x00\x00\x01\x00\x00\x00\x01\x00/\x00\t\x00\x00\x00\x01\x00\x00\x006\x000\x00\n\x00\x00\x00\x01\x00\x00\x03\x94\x001\x00\x07\x00\x00\x00,\x00\x00\x03\x9c\x002\x00\t\x00\x00\x00\x01\x02\x81\x10\x00\x003\x00\t\x00\x00\x00\x01\x00\x00P\x00\x004\x00\t\x00\x00\x00\x01\x00\x00\x00\x07\x005\x00\t\x00\x00\x00\x01\x00\x00\x00\x06\x006\x00\t\x00\x00\x00\x01\x00\x00\x00\x0c\x007\x00\t\x00\x00\x00\x01\x00\x00\x00\x08\x008\x00\t\x00\x00\x00\x01\x00\x00\x00\x0f\x009\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00:\x00\t\x00\x00\x00\x01\x00\x00\x00\x80\x00;\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00<\x00\t\x00\x00\x00\x01\x00\x00\x00\x04\x00=\x00\t\x00\x00\x00\x01\x00\x00\x00d\x00A\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00B\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00C\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00D\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00E\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00F\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00H\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00I\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00J\x00\t\x00\x00\x00\x01\x00\x00\x00\x04\x00M\x00\n\x00\x00\x00\x01\x00\x00\x03\xc8\x00N\x00\x07\x00\x00\x00y\x00\x00\x03\xd0\x00O\x00\x07\x00\x00\x00+\x00\x00\x04I\x00R\x00\t\x00\x00\x00\x01\xff\xff\xff\xf9\x00T\x00\x07\x00\x00\x00g\x00\x00\x04t\x00U\x00\x07\x00\x00\x00+\x00\x00\x04\xdb\x00X\x00\x07\x00\x00\x00,\x00\x00\x05\x06\x00Z\x00\x07\x00\x00\x00^\x00\x00\x052\x00\x00\x00\x00bplist00\xd4\x01\x02\x03\x04\x05\x06\x07\x08UflagsUvalueYtimescaleUepoch\x10\x01\x13\x00\x00"\xec\xc5\'\xd1\xd8\x12;\x9a\xca\x00\x10\x00\x08\x11\x17\x1d\'-/8=\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xffCI\x00\x00\xcdf\x00\x00\x11i\x00\x01\x98;\xff\xff\xa1\x1b\x00\x00\xed\xe2\x00\x00\x00\x08\xc6\x00\x80\x14q750n\x00D2B7BFD8-D3F5-472C-AB4B-CA32218DD2BF\x00\x00\x10(\xaa\x00\x0f\xff\xb5\x00\x00\x00\r\x10\x00\x00\n\x00\x00\x00\x000\xc0\x16\xac\x00\x02\xa8\xba\x00\x00\\\x9142944ABF-F240-4F99-ABB1-EE7C3383E561\x00\x00\x00\x00\xdf\x00\x00\x01\x00\x01\x00\x00\x00\x08\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x02`\xf5\x00\x00\x10\xbabplist00\xd2\x01\x02\x03\x04Q1Q2\x10\x01\xa2\x05\n\xd2\x06\x07\x08\tS2.1S2.2#@_:\xdc\xc0\x00\x00\x00#@\xefR\x80\x00\x00\x00\x00\xd2\x06\x07\x0b\x0c#\x00\x00\x00\x00\x00\x00\x00\x00#@&\x00\x00\x00\x00\x00\x00\x08\r\x0f\x11\x13\x16\x1b\x1f#,5:C\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Lbplist00\x10\x00\x08\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\nbplist00\xd8\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0b\x0b\x0c\r\x0cQ7Q3Q4Q0Q5Q1Q6Q2\x10\x00"?\x80\x00\x00\x10\x01"\x00\x00\x00\x00\x10\x05\x08\x19\x1b\x1d\x1f!#%\')+027\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x009bplist00\x10\x00\x08\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\nbplist00\x11\tr\x08\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0bbplist00\xd5\x01\x02\x03\x04\x05\x06\x07\x08\t\nQ3Q1Q4Q2Q0";\xd3\xc9\x9f":\xb31\xa4"?\x19\x99\x9a";\xd3\xc9\x9f\x10\x01\x08\x13\x15\x17\x19\x1b\x1d"\',1\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x003\x00\x17\xad\xb8\x00\n\xaa\x81\x00\x1fPd\x00\x01\xff\xe7\x00\x12\xfcL\x00\n\xaa\x81\x00\x00\x00\x0e\x00\x00\x00\x05Apple\x00iPhone 16 Pro Max back triple camera 2.22mm f/2.2\x00\x00\x0f\x00\x01\x00\x02\x00\x00\x00\x02N\x00\x00\x00\x00\x02\x00\x05\x00\x00\x00\x03\x00\x00\t\x9c\x00\x03\x00\x02\x00\x00\x00\x02W\x00\x00\x00\x00\x04\x00\x05\x00\x00\x00\x03\x00\x00\t\xb4\x00\x05\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x06\x00\x05\x00\x00\x00\x01\x00\x00\t\xcc\x00\x07\x00\x05\x00\x00\x00\x03\x00\x00\t\xd4\x00\x0c\x00\x02\x00\x00\x00\x02K\x00\x00\x00\x00\r\x00\x05\x00\x00\x00\x01\x00\x00\t\xec\x00\x10\x00\x02\x00\x00\x00\x02T\x00\x00\x00\x00\x11\x00\x05\x00\x00\x00\x01\x00\x00\t\xf4\x00\x17\x00\x02\x00\x00\x00\x02T\x00\x00\x00\x00\x18\x00\x05\x00\x00\x00\x01\x00\x00\t\xfc\x00\x1d\x00\x02\x00\x00\x00\x0b\x00\x00\n\x04\x00\x1f\x00\x05\x00\x00\x00\x01\x00\x00\n\x0f\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00\x15\x00\x00\x00\x01\x00\x00\x15\x08\x00\x00\x00d\x00\x00\x00y\x00\x00\x00\x01\x00\x00\x007\x00\x00\x00\x01\x00\x00\x08\x08\x00\x00\x00d\x00\x01[I\x00\x00\x0c\xd7\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x03e-\x00\x00\x1e\xbf\x00\x03e-\x00\x00\x1e\xbf2025:05:29\x00\x00\x04\xc7\x8b\x00\x00\x14x',
            {
                "Make": "Apple",
                "Model": "iPhone 16 Pro Max",
                "Orientation": 1,
                "ExifTag": 255,
                "ExposureTime": (1, 21),
                "ExposureProgram": 2,
                "ISOSpeedRatings": 640,
                "ExifVersion": "0232",
                "MeteringMode": 5,
                "Flash": 16,
                "ColorSpace": 65535,
                "SensingMethod": 2,
                "ExposureMode": 0,
                "WhiteBalance": 0,
                "FocalLengthIn35mmFilm": 24,
            },
        ),
    ]
)
def data_decode_exif(request):
    return request.param


def test_decode_exif(data_decode_exif):
    exif_data, expected = data_decode_exif
    actual = Common.decode_exif(exif_data)
    assert actual == expected


@pytest.fixture(
    params=[
        (
            Path(f"{dirname(__file__)}/data/HEIC/Cartoon.heic"),
            {
                "file_size": "44.6 KB",
                "file_ts": "2025-08-16_23-44-21",
                "format": "HEIF",
                "mode": "RGB",
                "size": (758, 758),
                "info": {
                    "aux": {},
                    "bit_depth": 8,
                    "chroma": 420,
                    "depth_images": [],
                    "icc_profile_type": "prof",
                    "metadata": [],
                    "original_orientation": None,
                    "primary": True,
                    "thumbnails": [],
                },
                "exif": {"ExifTag": 90, "Orientation": 1},
            },
        ),
        (
            Path(f"{dirname(__file__)}/data/HEIC/Cartoon_180cw.heic"),
            {
                "file_size": "42.4 KB",
                "file_ts": "2025-08-17_11-05-21",
                "format": "HEIF",
                "mode": "RGB",
                "size": (758, 758),
                "info": {
                    "aux": {},
                    "bit_depth": 8,
                    "chroma": 420,
                    "depth_images": [],
                    "icc_profile_type": "prof",
                    "metadata": [],
                    "original_orientation": None,
                    "primary": True,
                    "thumbnails": [],
                },
                "exif": {"ExifTag": 114, "Orientation": 1},
            },
        ),
    ]
)
def data_get_image(request):
    return request.param


def test_get_image_data(data_get_image):
    file, expected = data_get_image
    actual = Common.get_image_data(file)
    # Cloud CI runs get different ts
    expected.pop("file_ts")
    actual[1].pop("file_ts")
    assert actual[1] == expected


@pytest.fixture(
    params=[
        (
            Path(f"{dirname(__file__)}/data/HEIC/IMG_0070.HEIC"),
            Path(f"{dirname(__file__)}/data/HEIC/IMG_0070.HEIC"),
            True,
        ),
        (
            Path(f"{dirname(__file__)}/data/PNG/Checkmark.PNG"),
            Path(f"{dirname(__file__)}/data/PNG/LagrangePoints.png"),
            False,
        ),
        (
            Path(f"{dirname(__file__)}/data/JPG/152.JPG"),
            Path(f"{dirname(__file__)}/data/JPG/P1040566.jpeg"),
            False,
        ),
    ]
)
def data_are_images_equal(request):
    return request.param


def test_are_images_equal(data_are_images_equal):
    path1, path2, expected = data_are_images_equal
    actual = Common.are_images_equal(path1, path2)
    assert actual == expected


@pytest.fixture(
    params=[
        (1024, 768, 10, (10, 10, 1014, 758)),
        (960, 1280, 5, (5, 5, 955, 1275)),
        (640, 480, 9, (9, 9, 631, 471)),
    ]
)
def data_get_crop_box(request):
    return request.param


def test_get_crop_box(data_get_crop_box):
    width, height, border_width, expected = data_get_crop_box
    actual = Common.get_crop_box(width, height, border_width)
    assert actual == expected


@pytest.fixture(
    params=[
        (
            Path(f"{dirname(__file__)}/data/HEIC/Cartoon.heic"),
            Path(f"{dirname(__file__)}/.out/"),
            "90cw",
            Path(f"{dirname(__file__)}/.out/Cartoon_90cw.heic"),
        ),
        (
            Path(f"{dirname(__file__)}/data/HEIC/Cartoon.heic"),
            REPLACE,
            "90cw",
            Path(f"{dirname(__file__)}/data/HEIC/Cartoon_tmp.heic"),
        ),
    ]
)
def data_set_out_file(request):
    return request.param


def test_set_out_file(data_set_out_file):
    in_path, out_path, extra, expected = data_set_out_file
    actual = Common.set_out_file(in_path, out_path, extra)
    assert actual == expected
